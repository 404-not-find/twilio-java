/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /       
 */

package com.twilio.rest.reader.api.v2010.account.sms;

import com.google.common.collect.Range;
import com.twilio.rest.converter.DateConverter;
import com.twilio.rest.exception.ApiConnectionException;
import com.twilio.rest.exception.ApiException;
import com.twilio.rest.http.HttpMethod;
import com.twilio.rest.http.Request;
import com.twilio.rest.http.Response;
import com.twilio.rest.http.TwilioRestClient;
import com.twilio.rest.reader.Reader;
import com.twilio.rest.resource.Page;
import com.twilio.rest.resource.ResourceSet;
import com.twilio.rest.resource.RestException;
import com.twilio.rest.resource.api.v2010.account.sms.SmsMessage;
import org.joda.time.DateTime;

public class SmsMessageReader extends Reader<SmsMessage> {
    private String accountSid;
    private com.twilio.rest.type.PhoneNumber to;
    private com.twilio.rest.type.PhoneNumber from;
    private DateTime absoluteDateSent;
    private Range<DateTime> rangeDateSent;

    /**
     * Construct a new SmsMessageReader.
     */
    public SmsMessageReader() {
    }

    /**
     * Construct a new SmsMessageReader.
     * 
     * @param accountSid The account_sid
     */
    public SmsMessageReader(final String accountSid) {
        this.accountSid = accountSid;
    }

    /**
     * The to.
     * 
     * @param to The to
     * @return this
     */
    public SmsMessageReader byTo(final com.twilio.rest.type.PhoneNumber to) {
        this.to = to;
        return this;
    }

    /**
     * The from.
     * 
     * @param from The from
     * @return this
     */
    public SmsMessageReader byFrom(final com.twilio.rest.type.PhoneNumber from) {
        this.from = from;
        return this;
    }

    /**
     * The absolute_date_sent.
     * 
     * @param absoluteDateSent The absolute_date_sent
     * @return this
     */
    public SmsMessageReader byDateSent(final DateTime absoluteDateSent) {
        this.rangeDateSent = null;
        this.absoluteDateSent = absoluteDateSent;
        return this;
    }

    /**
     * The range_date_sent.
     * 
     * @param rangeDateSent The range_date_sent
     * @return this
     */
    public SmsMessageReader byDateSent(final Range<DateTime> rangeDateSent) {
        this.absoluteDateSent = null;
        this.rangeDateSent = rangeDateSent;
        return this;
    }

    /**
     * Make the request to the Twilio API to perform the read.
     * 
     * @param client TwilioRestClient with which to make the request
     * @return SmsMessage ResourceSet
     */
    @Override
    public ResourceSet<SmsMessage> execute(final TwilioRestClient client) {
        return new ResourceSet<>(this, client, firstPage());
    }

    /**
     * Make the request to the Twilio API to perform the read.
     * 
     * @param client TwilioRestClient with which to make the request
     * @return SmsMessage ResourceSet
     */
    @Override
    @SuppressWarnings("checkstyle:linelength")
    public Page<SmsMessage> firstPage(final TwilioRestClient client) {
        this.accountSid = this.accountSid == null ? client.getAccountSid() : this.accountSid;
        Request request = new Request(
            HttpMethod.GET,
            TwilioRestClient.Domains.API.toString(),
            "/2010-04-01/Accounts/" + this.accountSid + "/SMS/Messages.json",
            client.getRegion()
        );
        
        addQueryParams(request);
        return pageForRequest(client, request);
    }

    /**
     * Retrieve the next page from the Twilio API.
     * 
     * @param page current page
     * @param client TwilioRestClient with which to make the request
     * @return Next Page
     */
    @Override
    public Page<SmsMessage> nextPage(final Page<SmsMessage> page, 
                                     final TwilioRestClient client) {
        Request request = new Request(
            HttpMethod.GET,
            page.getNextPageUrl(TwilioRestClient.Domains.API.toString(), client.getRegion())
        );
        return pageForRequest(client, request);
    }

    /**
     * Generate a Page of SmsMessage Resources for a given request.
     * 
     * @param client TwilioRestClient with which to make the request
     * @param request Request to generate a page for
     * @return Page for the Request
     */
    private Page<SmsMessage> pageForRequest(final TwilioRestClient client, final Request request) {
        Response response = client.request(request);
        
        if (response == null) {
            throw new ApiConnectionException("SmsMessage read failed: Unable to connect to server");
        } else if (!TwilioRestClient.SUCCESS.apply(response.getStatusCode())) {
            RestException restException = RestException.fromJson(response.getStream(), client.getObjectMapper());
            if (restException == null) {
                throw new ApiException("Server Error, no content");
            }
        
            throw new ApiException(
                restException.getMessage(),
                restException.getCode(),
                restException.getMoreInfo(),
                restException.getStatus(),
                null
            );
        }
        
        return Page.fromJson(
            "sms_messages",
            response.getContent(),
            SmsMessage.class,
            client.getObjectMapper()
        );
    }

    /**
     * Add the requested query string arguments to the Request.
     * 
     * @param request Request to add query string arguments to
     */
    private void addQueryParams(final Request request) {
        if (to != null) {
            request.addQueryParam("To", to.toString());
        }
        
        if (from != null) {
            request.addQueryParam("From", from.toString());
        }
        
        if (absoluteDateSent != null) {
            request.addQueryParam("DateSent", absoluteDateSent.toString(Request.QUERY_STRING_DATE_FORMAT));
        } else if (rangeDateSent != null) {
            request.addQueryDateRange("DateSent", rangeDateSent);
        }
        
        request.addQueryParam("PageSize", Integer.toString(getPageSize()));
    }
}