/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /       
 */

package com.twilio.rest.creator.api.v2010.account;

import com.twilio.rest.converter.Promoter;
import com.twilio.rest.creator.Creator;
import com.twilio.rest.exception.ApiConnectionException;
import com.twilio.rest.exception.ApiException;
import com.twilio.rest.http.HttpMethod;
import com.twilio.rest.http.Request;
import com.twilio.rest.http.Response;
import com.twilio.rest.http.TwilioRestClient;
import com.twilio.rest.resource.RestException;
import com.twilio.rest.resource.api.v2010.account.Message;

import java.math.BigDecimal;
import java.net.URI;
import java.util.List;

public class MessageCreator extends Creator<Message> {
    private String accountSid;
    private final com.twilio.rest.type.PhoneNumber to;
    private String body;
    private List<URI> mediaUrl;
    private com.twilio.rest.type.PhoneNumber from;
    private String messagingServiceSid;
    private URI statusCallback;
    private String applicationSid;
    private BigDecimal maxPrice;
    private Boolean provideFeedback;

    /**
     * Construct a new MessageCreator.
     * 
     * @param to The phone number to receive the message
     * @param body The body
     * @param from The phone number that initiated the message
     */
    public MessageCreator(final com.twilio.rest.type.PhoneNumber to, 
                          final String body, 
                          final com.twilio.rest.type.PhoneNumber from) {
        this.to = to;
        this.body = body;
        this.from = from;
    }

    /**
     * Construct a new MessageCreator.
     * 
     * @param accountSid The account_sid
     * @param to The phone number to receive the message
     * @param body The body
     * @param from The phone number that initiated the message
     */
    public MessageCreator(final String accountSid, 
                          final com.twilio.rest.type.PhoneNumber to, 
                          final String body, 
                          final com.twilio.rest.type.PhoneNumber from) {
        this.accountSid = accountSid;
        this.to = to;
        this.body = body;
        this.from = from;
    }

    /**
     * Construct a new MessageCreator.
     * 
     * @param to The phone number to receive the message
     * @param body The body
     * @param messagingServiceSid The messaging_service_sid
     */
    public MessageCreator(final com.twilio.rest.type.PhoneNumber to, 
                          final String body, 
                          final String messagingServiceSid) {
        this.to = to;
        this.body = body;
        this.messagingServiceSid = messagingServiceSid;
    }

    /**
     * Construct a new MessageCreator.
     * 
     * @param accountSid The account_sid
     * @param to The phone number to receive the message
     * @param body The body
     * @param messagingServiceSid The messaging_service_sid
     */
    public MessageCreator(final String accountSid, 
                          final com.twilio.rest.type.PhoneNumber to, 
                          final String body, 
                          final String messagingServiceSid) {
        this.accountSid = accountSid;
        this.to = to;
        this.body = body;
        this.messagingServiceSid = messagingServiceSid;
    }

    /**
     * Construct a new MessageCreator.
     * 
     * @param to The phone number to receive the message
     * @param mediaUrl The media_url
     * @param from The phone number that initiated the message
     */
    public MessageCreator(final com.twilio.rest.type.PhoneNumber to, 
                          final List<URI> mediaUrl, 
                          final com.twilio.rest.type.PhoneNumber from) {
        this.to = to;
        this.mediaUrl = mediaUrl;
        this.from = from;
    }

    /**
     * Construct a new MessageCreator.
     * 
     * @param accountSid The account_sid
     * @param to The phone number to receive the message
     * @param mediaUrl The media_url
     * @param from The phone number that initiated the message
     */
    public MessageCreator(final String accountSid, 
                          final com.twilio.rest.type.PhoneNumber to, 
                          final List<URI> mediaUrl, 
                          final com.twilio.rest.type.PhoneNumber from) {
        this.accountSid = accountSid;
        this.to = to;
        this.mediaUrl = mediaUrl;
        this.from = from;
    }

    /**
     * Construct a new MessageCreator.
     * 
     * @param to The phone number to receive the message
     * @param mediaUrl The media_url
     * @param messagingServiceSid The messaging_service_sid
     */
    public MessageCreator(final com.twilio.rest.type.PhoneNumber to, 
                          final List<URI> mediaUrl, 
                          final String messagingServiceSid) {
        this.to = to;
        this.mediaUrl = mediaUrl;
        this.messagingServiceSid = messagingServiceSid;
    }

    /**
     * Construct a new MessageCreator.
     * 
     * @param accountSid The account_sid
     * @param to The phone number to receive the message
     * @param mediaUrl The media_url
     * @param messagingServiceSid The messaging_service_sid
     */
    public MessageCreator(final String accountSid, 
                          final com.twilio.rest.type.PhoneNumber to, 
                          final List<URI> mediaUrl, 
                          final String messagingServiceSid) {
        this.accountSid = accountSid;
        this.to = to;
        this.mediaUrl = mediaUrl;
        this.messagingServiceSid = messagingServiceSid;
    }

    /**
     * The URL that Twilio will POST to each time your message status changes.
     * 
     * @param statusCallback URL Twilio will request when the status changes
     * @return this
     */
    public MessageCreator setStatusCallback(final URI statusCallback) {
        this.statusCallback = statusCallback;
        return this;
    }

    /**
     * The URL that Twilio will POST to each time your message status changes.
     * 
     * @param statusCallback URL Twilio will request when the status changes
     * @return this
     */
    public MessageCreator setStatusCallback(final String statusCallback) {
        return setStatusCallback(Promoter.uriFromString(statusCallback));
    }

    /**
     * Twilio the POST MessageSid as well as MessageStatus to the URL in the
     * MessageStatusCallback property of this Application.
     * 
     * @param applicationSid The application to use for callbacks
     * @return this
     */
    public MessageCreator setApplicationSid(final String applicationSid) {
        this.applicationSid = applicationSid;
        return this;
    }

    /**
     * The max_price.
     * 
     * @param maxPrice The max_price
     * @return this
     */
    public MessageCreator setMaxPrice(final BigDecimal maxPrice) {
        this.maxPrice = maxPrice;
        return this;
    }

    /**
     * The provide_feedback.
     * 
     * @param provideFeedback The provide_feedback
     * @return this
     */
    public MessageCreator setProvideFeedback(final Boolean provideFeedback) {
        this.provideFeedback = provideFeedback;
        return this;
    }

    /**
     * Make the request to the Twilio API to perform the create.
     * 
     * @param client TwilioRestClient with which to make the request
     * @return Created Message
     */
    @Override
    @SuppressWarnings("checkstyle:linelength")
    public Message execute(final TwilioRestClient client) {
        this.accountSid = this.accountSid == null ? client.getAccountSid() : this.accountSid;
        Request request = new Request(
            HttpMethod.POST,
            TwilioRestClient.Domains.API.toString(),
            "/2010-04-01/Accounts/" + this.accountSid + "/Messages.json",
            client.getRegion()
        );
        
        addPostParams(request);
        Response response = client.request(request);
        
        if (response == null) {
            throw new ApiConnectionException("Message creation failed: Unable to connect to server");
        } else if (!TwilioRestClient.SUCCESS.apply(response.getStatusCode())) {
            RestException restException = RestException.fromJson(response.getStream(), client.getObjectMapper());
            if (restException == null) {
                throw new ApiException("Server Error, no content");
            }
        
            throw new ApiException(
                restException.getMessage(),
                restException.getCode(),
                restException.getMoreInfo(),
                restException.getStatus(),
                null
            );
        }
        
        return Message.fromJson(response.getStream(), client.getObjectMapper());
    }

    /**
     * Add the requested post parameters to the Request.
     * 
     * @param request Request to add post params to
     */
    private void addPostParams(final Request request) {
        if (to != null) {
            request.addPostParam("To", to.toString());
        }
        
        if (body != null) {
            request.addPostParam("Body", body);
        }
        
        if (mediaUrl != null) {
            for (URI prop : mediaUrl) {
                request.addPostParam("MediaUrl", prop.toString());
            }
        }
        
        if (from != null) {
            request.addPostParam("From", from.toString());
        }
        
        if (messagingServiceSid != null) {
            request.addPostParam("MessagingServiceSid", messagingServiceSid);
        }
        
        if (statusCallback != null) {
            request.addPostParam("StatusCallback", statusCallback.toString());
        }
        
        if (applicationSid != null) {
            request.addPostParam("ApplicationSid", applicationSid);
        }
        
        if (maxPrice != null) {
            request.addPostParam("MaxPrice", maxPrice.toString());
        }
        
        if (provideFeedback != null) {
            request.addPostParam("ProvideFeedback", provideFeedback.toString());
        }
    }
}