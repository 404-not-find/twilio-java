/**
 * This code was generated by
 * \ / _    _  _|   _  _
 *  | (_)\/(_)(_|\/| |(/_  v1.0.0
 *       /       /       
 */

package com.twilio.rest.api.v2010.account.sip.domain;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.JsonParseException;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.google.common.base.MoreObjects;
import com.twilio.base.Resource;
import com.twilio.converter.DateConverter;
import com.twilio.exception.ApiConnectionException;
import com.twilio.exception.ApiException;
import com.twilio.exception.RestException;
import com.twilio.http.HttpMethod;
import com.twilio.http.Request;
import com.twilio.http.Response;
import com.twilio.http.TwilioRestClient;
import com.twilio.rest.Domains;
import org.joda.time.DateTime;

import java.io.IOException;
import java.io.InputStream;
import java.util.Map;
import java.util.Objects;

@JsonIgnoreProperties(ignoreUnknown = true)
public class RegistrationEndpoint extends Resource {
    private static final long serialVersionUID = 4913379366057L;

    /**
     * Create a RegistrationEndpointReader to execute read.
     * 
     * @param accountSid The account_sid
     * @param domainSid The domain_sid
     * @param region The region
     * @param registrant The registrant
     * @return RegistrationEndpointReader capable of executing the read
     */
    public static RegistrationEndpointReader reader(final String accountSid, 
                                                    final String domainSid, 
                                                    final String region, 
                                                    final String registrant) {
        return new RegistrationEndpointReader(accountSid, domainSid, region, registrant);
    }

    /**
     * Create a RegistrationEndpointReader to execute read.
     * 
     * @param domainSid The domain_sid
     * @param region The region
     * @param registrant The registrant
     * @return RegistrationEndpointReader capable of executing the read
     */
    public static RegistrationEndpointReader reader(final String domainSid, 
                                                    final String region, 
                                                    final String registrant) {
        return new RegistrationEndpointReader(domainSid, region, registrant);
    }

    /**
     * Converts a JSON String into a RegistrationEndpoint object using the provided
     * ObjectMapper.
     * 
     * @param json Raw JSON String
     * @param objectMapper Jackson ObjectMapper
     * @return RegistrationEndpoint object represented by the provided JSON
     */
    public static RegistrationEndpoint fromJson(final String json, final ObjectMapper objectMapper) {
        // Convert all checked exceptions to Runtime
        try {
            return objectMapper.readValue(json, RegistrationEndpoint.class);
        } catch (final JsonMappingException | JsonParseException e) {
            throw new ApiException(e.getMessage(), e);
        } catch (final IOException e) {
            throw new ApiConnectionException(e.getMessage(), e);
        }
    }

    /**
     * Converts a JSON InputStream into a RegistrationEndpoint object using the
     * provided ObjectMapper.
     * 
     * @param json Raw JSON InputStream
     * @param objectMapper Jackson ObjectMapper
     * @return RegistrationEndpoint object represented by the provided JSON
     */
    public static RegistrationEndpoint fromJson(final InputStream json, final ObjectMapper objectMapper) {
        // Convert all checked exceptions to Runtime
        try {
            return objectMapper.readValue(json, RegistrationEndpoint.class);
        } catch (final JsonMappingException | JsonParseException e) {
            throw new ApiException(e.getMessage(), e);
        } catch (final IOException e) {
            throw new ApiConnectionException(e.getMessage(), e);
        }
    }

    private final String addressOfRecord;
    private final DateTime dateCreated;
    private final DateTime dateUpdated;
    private final DateTime dateExpires;
    private final String sipCallId;
    private final String sipContact;
    private final Integer sipCseq;
    private final String sipPath;
    private final String sipVia;
    private final String userAgent;
    private final String channelType;
    private final String displayName;

    @JsonCreator
    private RegistrationEndpoint(@JsonProperty("address_of_record")
                                 final String addressOfRecord, 
                                 @JsonProperty("date_created")
                                 final String dateCreated, 
                                 @JsonProperty("date_updated")
                                 final String dateUpdated, 
                                 @JsonProperty("date_expires")
                                 final String dateExpires, 
                                 @JsonProperty("sip_call_id")
                                 final String sipCallId, 
                                 @JsonProperty("sip_contact")
                                 final String sipContact, 
                                 @JsonProperty("sip_cseq")
                                 final Integer sipCseq, 
                                 @JsonProperty("sip_path")
                                 final String sipPath, 
                                 @JsonProperty("sip_via")
                                 final String sipVia, 
                                 @JsonProperty("user_agent")
                                 final String userAgent, 
                                 @JsonProperty("channel_type")
                                 final String channelType, 
                                 @JsonProperty("display_name")
                                 final String displayName) {
        this.addressOfRecord = addressOfRecord;
        this.dateCreated = DateConverter.rfc2822DateTimeFromString(dateCreated);
        this.dateUpdated = DateConverter.rfc2822DateTimeFromString(dateUpdated);
        this.dateExpires = DateConverter.rfc2822DateTimeFromString(dateExpires);
        this.sipCallId = sipCallId;
        this.sipContact = sipContact;
        this.sipCseq = sipCseq;
        this.sipPath = sipPath;
        this.sipVia = sipVia;
        this.userAgent = userAgent;
        this.channelType = channelType;
        this.displayName = displayName;
    }

    /**
     * Returns The The address_of_record.
     * 
     * @return The address_of_record
     */
    public final String getAddressOfRecord() {
        return this.addressOfRecord;
    }

    /**
     * Returns The The date_created.
     * 
     * @return The date_created
     */
    public final DateTime getDateCreated() {
        return this.dateCreated;
    }

    /**
     * Returns The The date_updated.
     * 
     * @return The date_updated
     */
    public final DateTime getDateUpdated() {
        return this.dateUpdated;
    }

    /**
     * Returns The The date_expires.
     * 
     * @return The date_expires
     */
    public final DateTime getDateExpires() {
        return this.dateExpires;
    }

    /**
     * Returns The The sip_call_id.
     * 
     * @return The sip_call_id
     */
    public final String getSipCallId() {
        return this.sipCallId;
    }

    /**
     * Returns The The sip_contact.
     * 
     * @return The sip_contact
     */
    public final String getSipContact() {
        return this.sipContact;
    }

    /**
     * Returns The The sip_cseq.
     * 
     * @return The sip_cseq
     */
    public final Integer getSipCseq() {
        return this.sipCseq;
    }

    /**
     * Returns The The sip_path.
     * 
     * @return The sip_path
     */
    public final String getSipPath() {
        return this.sipPath;
    }

    /**
     * Returns The The sip_via.
     * 
     * @return The sip_via
     */
    public final String getSipVia() {
        return this.sipVia;
    }

    /**
     * Returns The The user_agent.
     * 
     * @return The user_agent
     */
    public final String getUserAgent() {
        return this.userAgent;
    }

    /**
     * Returns The The channel_type.
     * 
     * @return The channel_type
     */
    public final String getChannelType() {
        return this.channelType;
    }

    /**
     * Returns The The display_name.
     * 
     * @return The display_name
     */
    public final String getDisplayName() {
        return this.displayName;
    }

    @Override
    public boolean equals(final Object o) {
        if (this == o) {
            return true;
        }
        
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        
        RegistrationEndpoint other = (RegistrationEndpoint) o;
        
        return Objects.equals(addressOfRecord, other.addressOfRecord) && 
               Objects.equals(dateCreated, other.dateCreated) && 
               Objects.equals(dateUpdated, other.dateUpdated) && 
               Objects.equals(dateExpires, other.dateExpires) && 
               Objects.equals(sipCallId, other.sipCallId) && 
               Objects.equals(sipContact, other.sipContact) && 
               Objects.equals(sipCseq, other.sipCseq) && 
               Objects.equals(sipPath, other.sipPath) && 
               Objects.equals(sipVia, other.sipVia) && 
               Objects.equals(userAgent, other.userAgent) && 
               Objects.equals(channelType, other.channelType) && 
               Objects.equals(displayName, other.displayName);
    }

    @Override
    public int hashCode() {
        return Objects.hash(addressOfRecord,
                            dateCreated,
                            dateUpdated,
                            dateExpires,
                            sipCallId,
                            sipContact,
                            sipCseq,
                            sipPath,
                            sipVia,
                            userAgent,
                            channelType,
                            displayName);
    }

    @Override
    public String toString() {
        return MoreObjects.toStringHelper(this)
                          .add("addressOfRecord", addressOfRecord)
                          .add("dateCreated", dateCreated)
                          .add("dateUpdated", dateUpdated)
                          .add("dateExpires", dateExpires)
                          .add("sipCallId", sipCallId)
                          .add("sipContact", sipContact)
                          .add("sipCseq", sipCseq)
                          .add("sipPath", sipPath)
                          .add("sipVia", sipVia)
                          .add("userAgent", userAgent)
                          .add("channelType", channelType)
                          .add("displayName", displayName)
                          .toString();
    }
}